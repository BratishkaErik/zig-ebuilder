<%
// SPDX-FileCopyrightText: 2025 BratishkaErik
// SPDX-License-Identifier: 0BSD
//
// Text above is about this template, not generated file itself.
//
// Text below is just an example for more easy generation of ebuilds
// for ::gentoo and ::guru repos, you can relicense this output however you want.

// Example output:
// X11, Wayland, Both.
fn join(list) {
	if (list.len == 0) {
		return "";
	}

	var result = "";
	for (var i = 0; i < list.len - 1; i += 1) {
		result += " " + list[i].toString() + ",";
	}
	var last_value = list[list.len - 1];
	result += " " + last_value.toString() + ".";
	return result;
}
-%>
# Copyright <%= @year %> Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

# Generated by zig-ebuilder <%= @generator_version %>

EAPI=8

DESCRIPTION="<%= @summary orelse "Write manually"%>"
HOMEPAGE="Write manually"

<%
// ZBS_DEPENDENCIES is declared only when non-empty.
var map = [];

foreach (@dependencies["tarball"]) |dep| {
	var pair = "[" + dep["name"] + "]='" + dep["url"] + "'";
	map.append(pair);
}

if (@tarball_tarball != null) {
	map.append("# Untranslatable Git dependencies were found. Host");
	map.append("# following tarball-tarball somewhere and add it to SRC_URI:");
	map.append("# " + @tarball_tarball);
	foreach (@dependencies["git_commit"]) |dep| {
		var pair = "[" + dep["name"] + "]=''";
		map.append(pair);
	}
}

var zbs_dependencies = "";
if (map.len > 0) {
	zbs_dependencies = "declare -g -r -A ZBS_DEPENDENCIES=(\n";
	foreach (map) |pair| {
		zbs_dependencies += "\t" + pair + "\n";
	}
	zbs_dependencies += ")\n\n";
}
%><%= zbs_dependencies -%>

ZIG_SLOT="<%= @zig_slot %>"
inherit zig

<%
// ZBS_DEPENDENCIES_SRC_URI is used only when ZBS_DEPENDENCIES with tarballs is set.
var urls = [
	"[Write manually main download URL of your package here]"
];
if (@dependencies["tarball"].len > 0) {
	urls.append("${ZBS_DEPENDENCIES_SRC_URI}");
}
if (@tarball_tarball != null) {
	urls.append("# Upload following tarball-tarball somewhere:");
	urls.append("# " + @tarball_tarball);
}

var src_uri = "SRC_URI=\"\n";
foreach (urls) |url| {
	src_uri += "\t" + url + "\n";
}
src_uri += "\"";
%><%= src_uri %>

# List licenses by yourself
# LICENSE=""
SLOT="0"
KEYWORDS="~amd64"

<%
// Collected libraries are printed only when any found.
var system_libraries_advice = "";

if (@report["system_libraries"].len > 0) {
	var entries = [
		"Set dependencies by yourself, but keep in mind that zig.eclass already",
		"adds Zig and pkg-config to BDEPEND, so you don't need to mention them here.",
		"Detected system libraries:"
	];
	foreach (@report["system_libraries"]) |library| {
		var entry = library["name"] + ", used by:" + join(library["used_by"]);
		entries.append("* " + entry);
	}
	foreach (entries) |entry| {
		system_libraries_advice += "# " + entry + "\n";
	}
	system_libraries_advice += "\n";
}
%><%= system_libraries_advice %>

<%-
// src_configure is set only when args are possible or needed.
var src_configure = "";

var my_zbs_args = [];
if (@report["user_options"].len > 0) {
	my_zbs_args.append("# Here you have list of options that are exposed by build.zig,");
	my_zbs_args.append("# pass USE flags and default values here.");

	my_zbs_args.append(null);
	foreach (@report["user_options"]) |option| {
		var comment = option["name"] + ": " + option["description"];
		my_zbs_args.append("# " + comment);
	}

	my_zbs_args.append(null);
	foreach (@report["user_options"]) |option| {
		var comment = "-D" + option["name"] + "=[" + option["type"] + "]" + join(option["values"] orelse []);
		my_zbs_args.append("# " + comment);
	}
	if (@report["system_integrations"].len > 0) {
		my_zbs_args.append(null);
	}
}

var first_disabled_option = true;
foreach (@report["system_integrations"]) |integration| {
	if (integration["enabled"] == false) {
		if (first_disabled_option) {
			my_zbs_args.append(null);
			my_zbs_args.append("# For some reason following options were disabled:");
			my_zbs_args.append("# If it was not you and they are disabled by default,");
			my_zbs_args.append("# no matter if system mode is enabled or not,");
			my_zbs_args.append("# check whether there are any reasons to do so.");
			my_zbs_args.append("# (for example, rare dependency)");
			first_disabled_option = false;
		}
	}

	// Per policy from https://bugs.gentoo.org/947033 ,
	// enable all integrations by default.
	my_zbs_args.append("-fsys=" + integration["name"]);
}

if (my_zbs_args.len > 0) {
	src_configure = "src_configure() {\n";
	src_configure += "\tlocal my_zbs_args=(\n";
	foreach (my_zbs_args) |my_zbs_arg| {
		if (my_zbs_arg == null) {
			src_configure += "\n";
			continue;
		}
		src_configure += "\t\t" + my_zbs_arg + "\n";
	}
	src_configure += "\t)\n\n";
	src_configure += "\tzig_src_configure\n";
	src_configure += "}";
}
%><%= src_configure %>
